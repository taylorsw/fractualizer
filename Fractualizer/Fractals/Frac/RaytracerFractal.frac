//#define SPHERE
//#define ACCUNORMAL
#define SHADOWS
#define LIGHTING
#define VISUALIZE_LIGHTING

v3 ptCamera;
float duNear;
v3 vkCamera;
int cLight;
v3 vkCameraOrtho;
float fogA;
v2 rsScreen;
v2 rsViewPlane;
int rglidLight[10];
v3 rgptLight[10];
float rgduCutoffLight[10];
raytracer RaytracerFractal
{
	global int LID_POINTLIGHT = 0;
	global int LID_BALLLIGHT = 1;

	global int cmarch = 148;
	global v3 ptOrigin = v3(0, 0, 0);

	float DuDeSphere(v3 ptPos, v3 ptCenter, float duRadius)
	{
		return length(ptPos - ptCenter) - duRadius;
	}

	global float duRadiusLight = 0.01;
	float DuDeLight(v3 ptPos, int ilight)
	{
		return DuDeSphere(ptPos, inputs.rgptLight[ilight], duRadiusLight);
	}

	float DuDeObject(v3 ptPos)
	{
#ifdef SPHERE
		return DuDeSphere(ptPos, ptOrigin, 0.3);
#endif
		return fractal.DuDeFractal(ptPos);
	}

	global int ID_FRACTAL = -1;
	float DuDeScene(v3 ptPos, out int idHit)
	{
		idHit = ID_FRACTAL;
		float du = DuDeObject(ptPos);
#ifdef VISUALIZE_LIGHTING
		for (int ilight = 0; ilight < inputs.cLight; ilight++)
		{
			float duDeLight = DuDeLight(ptPos, ilight);
			if (duDeLight < du)
			{
				du = duDeLight;
				idHit = ilight;
			}
		}
#endif
		return du;
	}

	v3 VkNormalSphere(v3 pt)
	{
		return normalize(pt);
	}

	v3 VkNormal(v3 pt, float duEpsilon)
	{
#ifdef SPHERE
		return VkNormalSphere(pt);
#endif
#ifdef ACCUNORMAL
		v3 vkX = v3(duEpsilon, 0, 0);
		v3 vkY = v3(0, duEpsilon, 0);
		v3 vkZ = v3(0, 0, duEpsilon);
		return normalize(v3(
			DuDeObject(pt + vkX) - DuDeObject(pt - vkX),
			DuDeObject(pt + vkY) - DuDeObject(pt - vkY),
			DuDeObject(pt + vkZ) - DuDeObject(pt - vkZ)));
#else
		float duDEPt = DuDeObject(pt);
		float dx = DuDeObject(pt + v3(duEpsilon, 0, 0)) - duDEPt;
		float dy = DuDeObject(pt + v3(0, duEpsilon, 0)) - duDEPt;
		float dz = DuDeObject(pt + v3(0, 0, duEpsilon)) - duDEPt;
		return normalize(v3(dx, dy, dz));
#endif
	}

	float DuEpsilon(float sfEpsilon, float duMarched)
	{
		float duPixelRadius = inputs.rsViewPlane.x / inputs.rsScreen.x;
		return sfEpsilon * 0.8 * duMarched / inputs.duNear * duPixelRadius;
	}

	global float MARCHED_TIMEOUT = -1;
	global float MARCHED_LIMIT = -2;
	v4 PtMarch(v3 pt, v3 vk, float sfEpsilon, float duMax, bool fIncludeLights, out int idHit, out float duEpsilon)
	{
		idHit = -1;
		duEpsilon = -1;
		float duTotal = 0;
		for (int i = 0; i < cmarch; ++i)
		{
			idHit = ID_FRACTAL;
			float du = 0.999 * 
				(fIncludeLights
					? DuDeScene(pt, idHit)
					: DuDeObject(pt));

			pt += du * vk;
			duTotal += du;
			duEpsilon = DuEpsilon(sfEpsilon, duTotal);

			if (duTotal > duMax)
				return v4(pt, MARCHED_LIMIT);

			if (du < duEpsilon)
				return v4(pt, i);
		}
		return v4(pt, MARCHED_TIMEOUT);
	}

	float hash(float n)
	{
		return frac(sin(n)*43758.5453);
	}

	float noise(v3 x)
	{
		// The noise function returns a value in the range -1.0f -> 1.0f

		v3 p = floor(x);
		v3 f = frac(x);

		f = f*f*(3.0-2.0*f);
		float n = p.x + p.y*57.0 + 113.0*p.z;

		return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
					   lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
				   lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
					   lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
	}

	// Basic orbit-trapping color
	v3 ColorOT(v3 marched)
	{
#ifdef SPHERE
		return v3(1.0, 0.0, 0.0);
#endif
		float paramStandin = 8.0;
		return v3(sin(marched.y * 7 + paramStandin * noise(marched * 10)), 0, sin(marched.x * 10 + (paramStandin / 2) * noise(marched * 10)));
		return normalize(
			v3(
				length(v3(-3, 0, 0) - marched) / 4.0, 
				length(v3(3, 0, 0) - marched) / 4.0, 
				0.5 + length(-marched) / 2.0));
	}

	// Ambient Occlusion
	v3 ColorAO(v3 color, float steps)
	{
		// ambient occlusion
		// return color * (1 - (0.5 * (1 - (steps / cmarch)))); // cool effect
		// float base = cmarch;
		// v3 colorAO = color * (1 - 0.3 * (1 - (log(steps) / log(base)) / base));
		v3 colorAO = color * (1 - (steps / cmarch));
		return colorAO;
	}

	v3 ColorFog(v3 color, v3 fogColor, float duMarched)
	{
		float frFog = 1.0 - inputs.fogA * exp(-duMarched / 5);
		return lerp(color, fogColor, frFog);
	}

	global v3 WHITE = v3(1, 1, 1);
	global v3 colorDiffuse = WHITE;
	global v3 colorSpecular = WHITE;
	global float shininess = 18.0;
	global float sfEpsilonShadow = 5.0;
	v3 ColorBP(v3 color, v3 ptSurface, int idHit, float duEpsilon)
	{
		if (idHit != ID_FRACTAL)
			return WHITE;

		v3 colorTexture = color;
		color = 0.1 * color;

		for (int ilight = 0; ilight < inputs.cLight; ilight++)
		{
			v3 vkSurfaceToLight = inputs.rgptLight[ilight] - ptSurface;
			if (inputs.rglidLight[ilight] == LID_BALLLIGHT)
			{
				if (length(vkSurfaceToLight) > inputs.rgduCutoffLight[ilight])
					continue;
			}
			v3 vkNormal = VkNormal(ptSurface, duEpsilon);
			v3 vkLightDir = normalize(vkSurfaceToLight);
			v3 vkCameraDir = normalize(inputs.ptCamera - ptSurface);

	#ifdef SHADOWS
			float epsilonIgnore;
			int idHitIgnore;
			v3 ptShadowStart = ptSurface + vkCameraDir * 1.1 * DuEpsilon(sfEpsilonShadow, length(inputs.ptCamera - ptSurface));
			float duToLight = length(vkSurfaceToLight);
			v4 shadow = PtMarch(ptShadowStart, vkLightDir, sfEpsilonShadow, duToLight, false, idHitIgnore, epsilonIgnore);

			// TODO: Should probably check if marched at least dist to light
			if (shadow.w != MARCHED_LIMIT)
				continue;
	#endif

			float lambertian = max(dot(vkLightDir, vkNormal), 0.0);
			float specular = 0.0;

			if (lambertian > 0.0)
			{
				v3 vkHalf = normalize(vkLightDir + vkCameraDir);
				float cos = max(dot(vkHalf, vkNormal), 0.0);
				specular = pow(cos, shininess);
			}

			color = color
				+ 0.6 * lambertian * colorTexture
				+ 0.6 * specular * colorTexture;

		}
		return color;
	}

	global float duMarchLimit = 20;
	RgbaTrace(v4 pos)
	{
		// position.x is from 0.5 to rsScreen.x + 6.5
		v2 ptScreen = v2(pos.x, pos.y) - v2(0.5, 0.5);

		v3 ptPlaneCenter = inputs.ptCamera + inputs.vkCamera * inputs.duNear;

		v3 vkDown = inputs.vkCameraOrtho;
		v3 vkRight = cross(vkDown, inputs.vkCamera);

		v2 vkFromScreenCenter = ptScreen - inputs.rsScreen / 2;

		// -0.5 <= frx <= 0.5
		float frx = vkFromScreenCenter.x / inputs.rsScreen.x;
		float fry = vkFromScreenCenter.y / inputs.rsScreen.y;

		v3 ptPlane = ptPlaneCenter + vkRight * inputs.rsViewPlane.x * frx + vkDown * inputs.rsViewPlane.y * fry;

		v3 vkRay = normalize(ptPlane - inputs.ptCamera);

		float duEpsilon;
		int idHit;
		float sfEpsilon = 2.0;
		v4 ptMarched = PtMarch(inputs.ptCamera, vkRay, sfEpsilon, duMarchLimit, true, idHit, duEpsilon);

		float duMarched = length(v3(ptMarched.x, ptMarched.y, ptMarched.z) - inputs.ptCamera);

		if (ptMarched.w == MARCHED_LIMIT || ptMarched.w == MARCHED_TIMEOUT)
			return v4(0, 0, 0, 1);

		v3 color = ColorOT(ptMarched);

#ifndef SPHERE
		color = ColorAO(color, ptMarched.w);

		color = ColorFog(color, v3(0.5, 0.6, 0.7), duMarched);
#endif

#ifdef LIGHTING
		color = ColorBP(color, ptMarched, idHit, duEpsilon);
#endif

		return v4(color.x, color.y, color.z, 1.0);
	}
}