// Orbit trapping
v3 ptTrap;

// Morphing
float sf = 2;

// Additional morphing
float duMirrorPlane = 1;
float sfRollx = 1;
float sfSin = 1;
int fGradientColor = 0;
bool fAdjustAdditional;
float sfTwist = 0;
float xTwistStart = 0;

fractal Mandelbox
{
	void sphereFold(ref v3 z, ref float dz)
	{
		float minRadius2 = 0.25;
		float fixedRadius2 = 1;

		float r2 = dot(z, z);
		if (r2 < minRadius2) 
		{
			// linear inner scaling
			float temp = (fixedRadius2 / minRadius2);
			z *= temp;
			dz *= temp;
		}
		else if (r2 < fixedRadius2) 
		{
			// this is the actual sphere inversion
			float temp = fixedRadius2 / r2;
			z *= temp;
			dz *= temp;
		}
	}

	void boxFold(ref v3 z, ref float dz)
	{
		float foldingLimit = 1;
		z = clamp(z, -foldingLimit, foldingLimit) * 2.0 - z;
	}	

	float hash(float n)
	{
		return frac(sin(n)*43758.5453);
	}

	float noise(v3 x)
	{
		// The noise function returns a value in the range -1.0f -> 1.0f

		v3 p = floor(x);
		v3 f = frac(x);

		f = f*f*(3.0-2.0*f.x);
		float n = p.x + p.y*57.0 + 113.0*p.z;

		return lerp(lerp(lerp( hash(n+0.0), hash(n+1.0),f.x),
					   lerp( hash(n+57.0), hash(n+58.0),f.x),f.y),
				   lerp(lerp( hash(n+113.0), hash(n+114.0),f.x),
					   lerp( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);
	}

	global int Iterations = 20;
	//global float sf = 2;
	float SfNormalizing()
	{
		return 3 * (inputs.sf + 1) / (inputs.sf - 1);
	}
	v3 Iterate(v3 ptInitial, v3 pos, ref float dr)
	{
		boxFold(pos, dr);       // Reflect
		sphereFold(pos, dr);    // Sphere Inversion

		pos = inputs.sf * pos + ptInitial;  // Scale & Translate
		dr = dr*abs(inputs.sf) + 1.0;
		return pos;
	}

	float DuPt(v3 pt, v3 ptTarget)
	{
		return distance(pt, ptTarget);
	}

	float DuTrap(v3 pt)
	{
		return DuPt(pt, inputs.ptTrap);
	}

	v3 PtTransformTwistX(v3 pt)
	{
		if (inputs.sfTwist == 0)
			return pt;

		float t = (pt.x - inputs.xTwistStart) * inputs.sfTwist;
		float c = cos(t);
		float s = sin(t);
		float yCenter = -0.479544;
		float zCenter = -0.5555527;
		float dy = pt.y - yCenter;
		float dz = pt.z - zCenter;
		float yRot = c * dy - s * dz;
		float zRot = s * dy + c * dz;
		return v3(pt.x, yCenter + yRot, zCenter + zRot);
	}

	v3 PtTransformMirrorY(v3 pt)
	{
		return v3(pt.x, inputs.duMirrorPlane - abs(inputs.duMirrorPlane - pt.y), pt.z);
	}

	v3 PtTransformSine(v3 pt)
	{
		return v3(pt.x, pt.y + sin(pt.x + inputs.sfRollx) * pt.z * inputs.sfSin, pt.z);
	}

	global float duAdjust = 1.0;
	v3 PtTransformRepeatX(v3 pt)
	{
		return v3(pt.x%duAdjust + duAdjust/2, pt.y, pt.z);
	}

	v3 PtTransformNormalizeScale(v3 pt)
	{
		return pt * SfNormalizing();
	}

	v3 PtAdjusted(v3 pt)
	{
		if (inputs.fAdjustAdditional)
			pt = PtTransformSine(PtTransformMirrorY(pt));

		return PtTransformNormalizeScale(PtTransformRepeatX(PtTransformTwistX(pt)));
	}

	global float dxRange = 10;
	global float PI2 = 3.14159265358979323;
	float SinTrap(float u, float offset)
	{
		return 0.5*sin(((u + offset)%dxRange)/dxRange*2*PI2) + 0.5;
	}

	v3 ColorGradient(v3 ptOrig, v3 colorOrig)
	{
		return colorOrig * v3(SinTrap(ptOrig.x, 0), SinTrap(ptOrig.x, dxRange / 3), SinTrap(ptOrig.x, 2 * dxRange / 3));
	}

	DE(v3 pos)
	{
		pos = PtAdjusted(pos);
		v3 offset = pos;
		float dr = 1.0;
		for (int n = 0; n < Iterations; n++) {
			pos = Iterate(offset, pos, dr);
		}
		float r = length(pos);
		return r / abs(dr) / SfNormalizing();
	}

	v3 Color(v3 pt)
	{
		v3 ptOrig = pt;

		pt = PtAdjusted(pt);
		v3 trap = v3(1e6, 1e6, 1e6);
		v3 z = pt;
		float dr = 1.0;
		for (int i = 0; i < Iterations; i++)
		{
			z = Iterate(pt, z, dr);
			if (DuTrap(z) < DuTrap(trap))
				trap = z;
		}

		v3 color = (v3(1, 1, 1) - trap);
		if (inputs.fGradientColor != 0)
		{
			return ColorGradient(ptOrig, color);
		}
		return color;
	)

//	v3 Color(v3 pt)
//	{
//		float sfR = 1;
//		float sfG = 1;
//		float sfB = 1;
//		float paramStandin = 8.0;
//		return v3(
//			sfR * sin(pt.y * 7 + paramStandin * noise(pt * 10)), 
//			sfG * sin(pt.y * 8 + paramStandin * noise(pt * 10)), 
//			sfB * sin(pt.x * 10 + (paramStandin / 2) * noise(pt * 10)));
//		return v3(1, 1, 1);
//	}
}