float sfTwist = 0;
float param = 8.0;
float param2 = 1.0;
fractal Mandelbulb
{
	global float Bailout = 5;
	global int iterations = 10;

	v3 Iterate(v3 ptInitial, v3 ptCur, ref float dr)
	{
		float Power = inputs.param;
		float r = length(ptCur);
		// convert to polar coordinates
		float theta = acos(ptCur.z / r);
		float phi = atan(ptCur.y / ptCur.x);
		dr = pow(r, Power - 1.0) * Power * dr + 1.0;

		// scale and rotate the point
		float zr = pow(r, Power);
		theta = theta * Power;
		phi = phi * Power;

		// convert back to cartesian coordinates
		ptCur = zr * v3(
			sin(theta) * cos(phi),
			sin(phi) * sin(theta),
			cos(theta));

		return ptCur + inputs.param2 * ptInitial;
	}

	v3 PtTransformed(v3 pt)
	{
		float t = pt.z * inputs.sfTwist;
		float c = cos(t);
		float s = sin(t);
		return v3(c * pt.x - s * pt.y, s * pt.x + c * pt.y, pt.z);
	}

	float SfTransformed(v3 pt)
	{
		return sqrt(8 * inputs.sfTwist * inputs.sfTwist + 1);
	}

	DE(v3 pos)
	{
		pos = PtTransformed(pos);
		v3 z = pos;
		float dr = 1.0;
		float r = 0;
		for (int i = 0; i < iterations; i++)
		{
			if ((r = length(z)) > Bailout)
				break;

			z = Iterate(pos, z, dr);
		}
		return 0.5 * log(r) * r / dr;
	}

	v3 Color(v3 pt)
	{
		pt = PtTransformed(pt);
		v3 trap = v3(1e6, 1e6, 1e6);
		v3 z = pt;
		float dr = 1.0;
		float r = 0;
		for (int i = 0; i < iterations; i++)
		{
			if ((r = length(z)) > Bailout)
				break;

			if (r < length(trap))
				trap = z;

			z = Iterate(pt, z, dr);
		}

		return v3(1, 1, 1) - trap;
	)
}